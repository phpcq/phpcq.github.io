{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"phpcq &lt;tl/dr&gt;","text":"<ul> <li> <p> Integrate build and check tools</p> <p>PHPCQ supports a lot of plugins and tools eg. phpunit, phpmd, phploc, phpcpd, psalm, composer-require-checker\u2026 more are on their way!</p> </li> <li> <p> See what's wrong at once</p> <p>Collect the output of all tools and present them in aggregated form. No matter if you are on CI or the local workstation. In GitHub and Gitlab even with annotations in Merge Requests.</p> </li> <li> <p> Easy to set up, easy to run</p> <p>Installed through composer, runs with PHP.</p> </li> <li> <p> Runs everywhere where there's PHP!</p> <p>Like your local machine, your Gitlab CI or any hosted CI like GitHub actions.</p> </li> </ul>"},{"location":"#whats-phpcq-and-why-you-should-use-it","title":"What's phpcq and why you should use it.","text":"<p><code>phpcq</code> is short for \"PHP Code Quality\".</p> <p>In the PHP ecosystem, there exists a variety of check tools, each with its unique purpose. Unfortunately, each and every of these tools has its own output format. Some use industry standard output e.g. junit logs but having to see through all of these is not feasible at all.</p> <p>Also organizing tools in pipelines is nice for CI when having Gitlab pipeline and GitHub actions, however, running them locally would be nice as well, collecting all the tool output and presenting it to the developer in a structured manner.</p> <p>That's where phpcq comes into play.</p> <p>The purpose of phpcq is to increase code quality in the PHP ecosystem by running configured tool chains and collecting the output of each of said tools into a single aggregated log file (or GitHub action log etc.).</p> <p>The heart of phpcq is the phpcq runner which executes build chain and aggregates the results of all tools.</p> <p>The PHP Code Quality Project consists of a framework, runner and collection of code quality related tools.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Head over to the Quickstart guide to get it up and running in no time.</p>"},{"location":"#credits","title":"Credits","text":"<p>Project originally created by: Christian Schiffler and Tristan Lins and now actively maintained by Christian Schiffler and David Molineus.</p>"},{"location":"#license","title":"License","text":"<p>The project and the core plugins are released under the MIT License</p>"},{"location":"#sponsorship","title":"Sponsorship","text":"<p>You can support this project via GitHub Sponsorship by sponsoring the main contributors discordier and dmolineus.</p>"},{"location":"phpcq-yaml-reference/","title":"<code>.phpcq.yaml.dist</code> file reference","text":"<p>The topics on this reference page are organized alphabetically by top-level key to reflect the structure of the file itself.</p> <p>Top-level keys that define a section in the configuration file such as <code>plugins</code>, <code>tasks</code> and so on, are listed with the options that support them as sub-topics. This maps to the <code>&lt;key&gt;: &lt;option&gt;: &lt;value&gt;</code> indent structure of the file.</p> <p>The <code>.phpcq.yaml.dist</code> file is a YAML file defining the project information. The default path is <code>./.phpcq.yaml.dist</code>.</p>"},{"location":"phpcq-yaml-reference/#artifact","title":"artifact","text":"<p>This is the output directory where build artifacts and logs will get stored.</p> <pre><code>phpcq:\n  artifact: .phpcq/build\n</code></pre>"},{"location":"phpcq-yaml-reference/#directories","title":"directories","text":"<p>List here all directories that contain code. For most projects, this means the <code>src</code> directory but some also have a dedicated <code>tests</code> directory as well. <pre><code>phpcq:\n  - src\n  - tests\n</code></pre></p>"},{"location":"phpcq-yaml-reference/#plugins","title":"plugins","text":"<p>Definition of plugins to load.</p> <p>Each key of this object is a plugin name.</p> <p>Minimum example for a plugin (This installs phpunit in any version, requiring the plugin to be signed): <pre><code>phpcq:\n  plugins:\n    phpunit: {}\n</code></pre></p> <p>Full example for a plugin: <pre><code>phpcq:\n  plugins:\n    phpunit:\n      version: ^1.0\n      signed: false\n      requirements:\n        phpunit:\n          version: ^9.0\n          signed: true\n</code></pre></p>"},{"location":"phpcq-yaml-reference/#requirements","title":"requirements","text":"<p>Info</p> <p>The needed requirements are already defined by the plugin.</p> <p>You only have to define this section if you want to (partially) override this information.</p> <p>Override the requirements of the plugin.</p> <p>Default: none</p>"},{"location":"phpcq-yaml-reference/#signed","title":"signed","text":"<p>This allows to disable signing requirement for the tool in this plugin.</p> <p>Default: <code>true</code></p>"},{"location":"phpcq-yaml-reference/#version","title":"version","text":"<p>Default: <code>*</code></p> <p>This is useful if the plugin defines a lower minimum version than desired or allows multiple versions but only one is desired.</p>"},{"location":"phpcq-yaml-reference/#runner-plugin","title":"runner-plugin","text":"<p>Danger</p> <p>Do not use this unless you know what you are doing.</p> <p>Url to the plugin file. Use this to override default plugin.</p> <p>Default: none</p>"},{"location":"phpcq-yaml-reference/#signed_1","title":"signed","text":"<p>This allows to disable signing requirement for this plugin.</p> <p>Default: <code>true</code></p>"},{"location":"phpcq-yaml-reference/#version_1","title":"version","text":"<p>Specifies desired version constraint for the plugin.</p> <pre><code>phpcq:\n  plugins:\n    phpunit:\n      # Require 1.x but minimum 1.1+\n      version: ^1.1\n</code></pre> <p>Default: <code>*</code></p>"},{"location":"phpcq-yaml-reference/#repositories","title":"repositories","text":"<p>Defines a list of repositories to obtain plugin and tool information from.</p> <p>This is a list of http(s) URIs and paths relative to the <code>.phpcq.yaml.dist</code>.</p> <p>The official repository is: <code>https://phpcq.github.io/repository/repository.json</code> <pre><code>phpcq:\n  repositories:\n    - https://phpcq.github.io/repository/repository.json\n</code></pre></p>"},{"location":"command-reference/","title":"Command reference","text":"<p>In this section we provide an overview of all cli commands you can use.</p> Command abstract completion Dump the shell completion script required to use shell autocompletion exec Execute a tool with the passed arguments install Install the phpcq installation from <code>.phpcq.lock</code> file platform-information Show platform information run Run a configured build task self-update Update the phpcq phar file update Update the phpcq installation (tools and plugins) validate Validate the phpcq installation"},{"location":"command-reference/completion/","title":"<code>completion</code>","text":"<p>The completion command dumps the shell completion script required to use shell autocompletion (currently only bash completion is supported).</p> <p>Usage: <code>completion [options] [--] [&lt;shell&gt;]</code></p>"},{"location":"command-reference/completion/#arguments","title":"Arguments","text":"<code>shell</code> <p>The shell type (e.g. \"<code>bash</code>\"), the value of the <code>$SHELL</code> env var will be used if this is not given.</p>"},{"location":"command-reference/completion/#options","title":"Options","text":"<code>--debug</code> Tail the completion debug log <code>-h, --help</code> Display help for the command. Static installationDynamic installation <p>Dump the script to a global completion file and restart your shell: <pre><code>bin/phpcq completion bash | sudo tee /etc/bash_completion.d/phpcq\n</code></pre></p> <p>Or dump the script to a local file and source it: <pre><code>bin/phpcq completion bash &gt; completion.sh\n</code></pre> Now either source the file whenever you use the project <pre><code>source completion.sh\n</code></pre> or add this line at the end of your \"<code>~/.bashrc</code>\" file: <pre><code>source /path/to/completion.sh\n</code></pre></p> <p>Add this to the end of your shell configuration file (e.g. \"~/.bashrc\"): <pre><code>eval \"$(/path/to/bin/phpcq completion bash)\"\n</code></pre></p>"},{"location":"command-reference/exec/","title":"<code>exec</code>","text":"<p>Execute a tool with the passed arguments.</p> <p>The executable tool names are provided by exec task plugins.</p> <p>Usage: <code>exec [options] [--] [&lt;application&gt; [&lt;args&gt;...]]</code></p>"},{"location":"command-reference/exec/#arguments","title":"Arguments","text":"<code>application</code> The name of the tool that should be executed. You can obtain a list of available tools by invoking <code>exec --help</code>. <code>args</code> Optional options and arguments to pass to the tool - the nature of available arguments and options depends on the tool being invoked."},{"location":"command-reference/exec/#options","title":"Options","text":"<code>-c, --config=CONFIG</code> <p>The configuration file to use.</p> <p>If not given, the following filenames are tried (in the current working directory):</p> <ul> <li><code>.phpcq.yaml</code></li> <li><code>phpcq.yaml</code></li> <li><code>.phpcq.yaml.dist</code></li> <li><code>phpcq.yaml.dist</code></li> </ul> <code>--home-dir=HOME-DIR</code> Path to the phpcq home directory (default: <code>$(CWD)/.phpcq</code>) <code>--ignore-platform-reqs</code> Ignore platform requirements (<code>php</code> &amp; <code>ext-</code> packages)."},{"location":"command-reference/global-options/","title":"global options","text":"<p>We have some options that are globally available in all commands.</p> <code>-q, --quiet</code> Do not output any message. <code>--ansi|--no-ansi</code> Force (or disable in case of <code>--no-ansi</code>) ANSI output. <code>-n, --no-interaction</code> Do not ask any interactive question. This will make any command relying on input fail. <code>-v|vv|vvv, --verbose</code> <p>Increase the verbosity of messages, can be passed up to three times:</p> <ul> <li>1 for normal output</li> <li>2 for more verbose output and</li> <li>3 for debug</li> </ul>"},{"location":"command-reference/install/","title":"<code>install</code>","text":"<p>Install the phpcq installation from existing <code>.phpcq.lock</code> file.</p> <p>If no <code>.phpcq.lock</code> file has been created yet, the <code>install</code> command behaves like the <code>update</code> command.</p>"},{"location":"command-reference/install/#options","title":"Options","text":"<p>Options:</p> <code>-d, --dry-run</code> Dry run <code>-x, --cache=CACHE</code> Path to the phpcq cache directory (default: <code>/$(HOME)/.cache/phpcq</code>) <code>-k, --trust-keys</code> Add all keys to trusted key storage (discouraged!) <code>-c, --config=CONFIG</code> <p>The configuration file to use.</p> <p>If not given, the following filenames are tried (in the current working directory):</p> <ul> <li><code>.phpcq.yaml</code></li> <li><code>phpcq.yaml</code></li> <li><code>.phpcq.yaml.dist</code></li> <li><code>phpcq.yaml.dist</code></li> </ul> <code>--home-dir=HOME-DIR</code> Path to the phpcq home directory (default: <code>$(CWD)/.phpcq</code>) <code>--ignore-platform-reqs</code> Ignore platform requirements (<code>php</code> &amp; <code>ext-</code> packages)."},{"location":"command-reference/platform-information/","title":"<code>platform-information</code>","text":"<p>Shows platform information.</p> <p>This lists the following platform information as ASCII table:</p> <ul> <li>PHP Version.</li> <li>Names of enabled PHP extensions and their version.</li> <li>Names of linked libraries and their version.</li> </ul>"},{"location":"command-reference/run/","title":"<code>run</code>","text":"<p>This command runs a configured build task.</p> <p>Should the task fail, it will be reported with a non-zero exit code (unless option <code>--exit-0</code> has been passed).</p> <p>If the passed task name is a chain, all tasks will get executed in sequential order and the result will get logged.</p>"},{"location":"command-reference/run/#arguments","title":"Arguments","text":"<code>task</code> Define a specific task which should be run (default: <code>default</code>)"},{"location":"command-reference/run/#options","title":"Options","text":"<code>--exit-0</code> Forces the exit code to 0 - this is useful to \"ignore\" failures in CI as \"allow-failure\" mode. <code>-r, --report=REPORT</code> <p>Set the report format(s) that shall be created (default: <code>file-report</code>).</p> <p>This can be passed multiple times.</p> <p>Available options are:</p> <ul> <li><code>file-report</code> - an xml file tracking violations organized by files.</li> <li><code>task-report</code> - an xml file tracking violations organized by check tasks.</li> <li><code>checkstyle</code> - checkstyle compatible XML output which is used by many tools.</li> </ul> <code>-o, --output=OUTPUT</code> <p>Set a specific console output format (default: <code>default</code>).</p> <p>This can be passed multiple times.</p> <p>Available options are:</p> <ul> <li><code>default</code> - The default phpcq output.</li> <li><code>github-action</code> - Github action compatible output.</li> </ul> <code>--threshold=THRESHOLD</code> <p>Set the minimum threshold for diagnostics to be reported - any severity below this will not get reported (default: <code>marginal</code>).</p> <p>Available options are (in ascending order):</p> <ul> <li><code>none</code></li> <li><code>info</code></li> <li><code>minor</code></li> <li><code>marginal</code></li> <li><code>major</code></li> <li><code>fatal</code></li> </ul> <code>-j, --threads=THREADS</code> <p>Set the amount of threads to run in parallel (default: <code>nproc</code>).</p> <p>The allowed values range from <code>1</code> (single thread) to the amount of available logical processors (if it can be determined)</p> <code>-c, --config=CONFIG</code> <p>The configuration file to use.</p> <p>If not given, the following filenames are tried (in the current working directory):</p> <ul> <li>.phpcq.yml</li> <li>phpcq.yml</li> <li>.phpcq.yml.dist</li> <li>phpcq.yml.dist</li> </ul> <code>--home-dir=HOME-DIR</code> Path to the phpcq home directory (default: <code>$(CWD)/.phpcq</code>) <code>--ignore-platform-reqs</code> Ignore platform requirements (<code>php</code> &amp; <code>ext-</code> packages). <code>-ff, --fast-finish</code> Do not keep going and execute all tasks but break on first error."},{"location":"command-reference/self-update/","title":"<code>self-update</code>","text":"<p>Updates the phpcq phar file</p>"},{"location":"command-reference/self-update/#options","title":"Options","text":"<code>-c, --config=CONFIG</code> <p>The configuration file to use.</p> <p>If not given, the following filenames are tried (in the current working directory):</p> <ul> <li>.phpcq.yml</li> <li>phpcq.yml</li> <li>.phpcq.yml.dist</li> <li>phpcq.yml.dist</li> </ul> <code>--home-dir=HOME-DIR</code> Path to the phpcq home directory (default: <code>$(CWD)/.phpcq</code>) <code>--ignore-platform-reqs</code> Ignore platform requirements (<code>php</code> &amp; <code>ext-</code> packages). <code>-x, --cache=CACHE</code> Path to the phpcq cache directory (default: <code>/$(HOME)/.cache/phpcq</code>) <code>--channel=CHANNEL</code> <p>The channel of the release (default: <code>unstable</code>).</p> <p>Right now only unstable is available.</p> <code>--base-uri=BASE-URI</code> The base uri of the phpcq releases [default: \"https://phpcq.github.io/distrib/phpcq\"] <code>--unsigned</code> Disable signature checking <code>--dry-run</code> Do not perform update, only check for a new release. <code>-f, --force</code> Force to update"},{"location":"command-reference/update/","title":"<code>update</code>","text":"<p>Update the phpcq installation.</p> <p>This resolves the most current available versions of plugins and tools that match the current platform. Then it updates the <code>.phpcq.lock</code> file and proceeds to download and install them.</p>"},{"location":"command-reference/update/#options","title":"Options","text":"<code>-f, --force-reinstall</code> Force to reinstall existing tools <code>-d, --dry-run</code> Dry run - this will resolve the new versions but only report them instead of writing <code>.phpcq.lock</code> and installing them. <code>-x, --cache=CACHE</code> Path to the phpcq cache directory (default: <code>/$(HOME)/.cache/phpcq</code>) <code>-k, --trust-keys</code> Add all keys to trusted key storage (discouraged!) <code>-c, --config=CONFIG</code> <p>The configuration file to use.</p> <p>If not given, the following filenames are tried (in the current working directory):</p> <ul> <li><code>.phpcq.yaml</code></li> <li><code>phpcq.yaml</code></li> <li><code>.phpcq.yaml.dist</code></li> <li><code>phpcq.yaml.dist</code></li> </ul> <code>--home-dir=HOME-DIR</code> Path to the phpcq home directory (default: <code>$(CWD)/.phpcq</code>) <code>--ignore-platform-reqs</code> Ignore platform requirements (<code>php</code> &amp; <code>ext-</code> packages)."},{"location":"command-reference/validate/","title":"<code>validate</code>","text":"<p>Validate the phpcq installation.</p> <p>This validates the yaml file</p>"},{"location":"command-reference/validate/#options","title":"Options","text":"<code>-c, --config=CONFIG</code> <p>The configuration file to use.</p> <p>If not given, the following filenames are tried (in the current working directory):</p> <ul> <li><code>.phpcq.yaml</code></li> <li><code>phpcq.yaml</code></li> <li><code>.phpcq.yaml.dist</code></li> <li><code>phpcq.yaml.dist</code></li> </ul> <code>--home-dir=HOME-DIR</code> Path to the phpcq home directory (default: <code>$(CWD)/.phpcq</code>) <code>--ignore-platform-reqs</code> Ignore platform requirements (<code>php</code> &amp; <code>ext-</code> packages)."},{"location":"plugins/","title":"Plugins","text":"<p>Given that <code>phpcq</code> is merely a wrapper for tool running and output aggregation, it depends on plugins to run said tools and collect their respective output.</p> <p>We officially provide an ever-growing list of plugins, but you can also write your own.</p> <p>Info</p> <p>If you have written a plugin that you feel should be included in this list, please do not hesitate to file a pull request for inclusion.</p> <p>See the developing chapter for details</p>"},{"location":"plugins/box/","title":"box","text":"<p>Github: https://github.com/phpcq/plugin-box</p>"},{"location":"plugins/composer-normalize/","title":"composer-normalize","text":"<p>Github: https://github.com/phpcq/plugin-composer-normalize</p> <p>This plugin provides composer-normalize integration for phpcq.</p>"},{"location":"plugins/composer-normalize/#configuration","title":"Configuration","text":"Option name Type Required Default Description <code>dry_run</code> <code>bool</code> <code>true</code> Show the results of normalizing, but do not modify any files <code>file</code> <code>string</code> Path to <code>composer.json</code> file relative to project root <code>indent_size</code> <code>int</code> <code>2</code> Indent size (an integer greater than 0); should be used with the indent_style option <code>indent_style</code> <code>space</code> or <code>tab</code> <code>space</code> Indent style (one of \"space\", \"tab\"); should be used with the <code>indent_size</code> option' <code>no_update_lock</code> <code>bool</code> Do not update lock file if it exists <code>ignore_output</code> <code>string[]</code> <code>[]</code> Regular expressions for output lines to ignore"},{"location":"plugins/composer-normalize/#installation","title":"Installation","text":"<pre><code>phpcq:\n  plugins:\n    composer-normalize:\n      version: ^1.0\n      signed: false\n  trusted-keys:\n    - C00543248C87FB13\n\ntasks:\n  # Default configuration for documental purpose\n  # composer-normalize:\n  #   dry_run: true\n  #   file: 'path/to/composer.json'\n  #   indent_size: 2\n  #   indent_style: space\n  #   no_update_lock: false\n  #   ignore_output: []\n\n  # As dry run defaults to true, we add another task for fixing - you can then run:\n  # `phpcq run composer-normalize` to report normalization issues\n  # `phpcq run composer-normalize-fix` to report and fix normalization issues\n  composer-normalize-fix:\n    plugin: composer-normalize\n    config:\n      dry_run: false\n</code></pre>"},{"location":"plugins/composer-require-checker/","title":"composer-require-checker","text":"<p>Github: https://github.com/phpcq/plugin-composer-require-checker</p>"},{"location":"plugins/developing/","title":"Developing plugins","text":""},{"location":"plugins/developing/#backward-compatibility-promise-bcp","title":"Backward Compatibility Promise (BCP)","text":"<p>The policy is for the major part following the same as Symfony's one. Note that the code marked as <code>@private</code> or <code>@internal</code> is excluded from the BCP.</p> <p>Text displayed by commands or the content of error/exception messages is also not subject to the BCP.</p> <p>To be on the safe side, only rely on interfaces in the plugin-api repository.</p> <p>Every plugin needs to have an entry script (most likely named after the tool it integrates) which exports an object instance implementing one or more plugin interfaces.</p> <p>These might be:</p> <ul> <li><code>Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface</code> when implementing a code checker plugin.</li> <li><code>Phpcq\\PluginApi\\Version10\\ExecPluginInterface</code> when providing an executable task (e.g. a command).</li> <li><code>Phpcq\\PluginApi\\Version10\\EnricherPluginInterface</code> when enhancing the configuration of another   plugin.</li> </ul> <p>There might be other types of plugins added in subsequent versions.</p>"},{"location":"plugins/developing/#writing-a-diagnostic-plugin-checking-code","title":"Writing a diagnostic plugin (checking code!)","text":"<p>When writing a diagnostic plugin, we need to write methods to:</p> <ol> <li>Describe the configuration of the plugin <code>DiagnosticsPluginInterface::describeConfiguration()</code></li> <li>Create the list of tasks to be performed from a configuration <code>DiagnosticsPluginInterface::createDiagnosticTasks()</code></li> </ol>"},{"location":"plugins/developing/#describing-the-configuration","title":"Describing the configuration","text":"<p>A plugin can describe its configuration using the [<code>PluginConfigurationBuilderInterface</code>][] passed to the <code>describeConfiguration</code> method.</p>"},{"location":"plugins/developing/#instantiate-the-diagnostic-tasks","title":"Instantiate the diagnostic tasks","text":""},{"location":"plugins/developing/#writing-an-exec-plugin-performing-tasks","title":"Writing an exec plugin (performing tasks!)","text":""},{"location":"plugins/developing/#describe-the-exec-task-what-can-be-run","title":"Describe the exec task (What can be run?)","text":""},{"location":"plugins/developing/#create-the-exec-task-run-them","title":"Create the exec task (Run them!)","text":""},{"location":"plugins/developing/#enriching-configuration-of-other-plugins","title":"Enriching configuration of other plugins","text":""},{"location":"plugins/developing/#registering-your-plugin-to-the-repository-optionally-share-your-work","title":"Registering your plugin to the repository (optionally share your work!)","text":""},{"location":"plugins/developing/#writing-the-phpcq-pluginjson-definition","title":"Writing the <code>phpcq-plugin.json</code> definition","text":""},{"location":"plugins/developing/#filing-a-pull-request-on-the-official-plugin-repository","title":"Filing a pull request on the official plugin repository","text":"<p>Please create a pull request in https://github.com/phpcq/repository against the <code>sources.yaml</code> file.</p> <p>You should simply add the GitHub repository as a new line at the bottom. Please also describe exactly what kind of functionality your plugin provides so other users can read this up later on.</p>"},{"location":"plugins/phpcpd/","title":"phpcpd","text":"<p>Github: https://github.com/phpcq/plugin-phpcpd</p>"},{"location":"plugins/phpcs/","title":"phpcs","text":"<p>Github: https://github.com/phpcq/plugin-phpcs</p>"},{"location":"plugins/phploc/","title":"phploc","text":"<p>Github: https://github.com/phpcq/plugin-phploc</p>"},{"location":"plugins/phpmd/","title":"phpmd","text":"<p>Github: https://github.com/phpcq/plugin-phpmd</p>"},{"location":"plugins/phpunit/","title":"phpunit","text":"<p>Github: https://github.com/phpcq/plugin-phpunit</p>"},{"location":"plugins/psalm/","title":"psalm","text":"<p>Github: https://github.com/phpcq/plugin-psalm</p>"},{"location":"quick-start/","title":"Quickstart guide","text":"<p>In this guide, we want to get you up and running in no time.</p> <ol> <li>Installation</li> <li>Configuration</li> <li>Usage</li> <li>Update</li> </ol>"},{"location":"quick-start/configuration/","title":"Configuration","text":""},{"location":"quick-start/configuration/#the-phpcqyamldist-file","title":"The <code>.phpcq.yaml.dist</code> file.","text":"<p>All the configuration of phpcq is contained within the <code>.phpcq.yaml.dist</code> file.</p> <p>Here is a minimal example configuration, which requires a single plugin (<code>phpunit</code> in this case).</p> Minimal exampleMinimal annotated example <pre><code>phpcq:\n  repositories:\n    - https://phpcq.github.io/repository/repository.json\n\n  directories:\n    - src\n    - tests\n\n  artifact: .phpcq/build\n\n  plugins:\n    phpunit:\n      version: ^1.0\n      signed: false\n      tools:\n        phpunit:\n          version: ^9.0\n\n  trusted-keys:\n    - 4AA394086372C20A\n\ntasks:\n  default:\n    - phpunit\n</code></pre> <pre><code>phpcq:\n  repositories:\n    # This is a list of repositories to obtain plugin and tool information from.\n    # The official repository is:\n    - https://phpcq.github.io/repository/repository.json\n\n  directories:\n    # List here all directories that contain code.\n    # For most projects, this means the `src` directory.\n    - src\n    # Some also have a dedicated `tests` directory as well.\n    - tests\n\n  # This is the output directory where build artifacts and logs will get stored.\n  artifact: .phpcq/build\n\n  # This section is used to require plugins and tools.\n  # Versions are defined with composer constraint notion.\n  plugins:\n    # Require the plugin 'phpunit'\n    phpunit:\n      # In at least version 1.0\n      version: ^1.0\n      # Mark the plugin as not signed (This is optional, default: true)\n      signed: false\n      # Optional\n      tools:\n        phpunit:\n          version: ^9.0\n\n  trusted-keys:\n    # Sebastian Bergmann uses this to sign phpunit phars.\n    # NOTE: This key is used to check the signature of the phpunit tool(!) only.\n    #       The plugin has been marked unsigned above.\n    - 4AA394086372C20A\n\n# Define here all tasks that can be executed.\ntasks:\n  default:\n    - phpunit\n</code></pre> <p>For details on the file format, please consult the reference.</p>"},{"location":"quick-start/installation/","title":"Installation","text":"composer bootstrapper component (preferred)download <code>phpcq.phar</code> <p>The preferred method of installation is to use the bootstrapper via composer.</p> <pre><code>composer require --dev phpcq/runner-bootstrap:@dev\n</code></pre> <p>As we do not provide a stable release of the bootstrap component, you are required to specify the <code>:@dev</code> for the version.  This installs a runner binary shim as <code>vendor/bin/phpcq</code> (or wherever your composer <code>bin-dir</code> might point to), which automatically downloads the current runner <code>phar</code> on first run.</p> <p>This is not recommended - consider installing the wrapper via composer require.</p> <pre><code>curl https://phpcq.github.io/phar/latest/phpcq.phar\n</code></pre>"},{"location":"quick-start/update/","title":"Update","text":""},{"location":"quick-start/update/#updating-the-runner","title":"Updating the runner","text":"<p>Updating the runner is easy via the <code>self-update</code> command - this will update the downloaded <code>.phar</code> to the current version.</p>"},{"location":"quick-start/update/#updating-plugins-and-tools","title":"Updating plugins and tools","text":"<p>Updating plugin and tool versions can be done by invoking the <code>update</code> command by calling <code>phpcq update</code>, which will determine the latest compatible versions mentioned in the <code>phpcq.yaml</code> file and update the <code>phpcq.lock</code> file. After the file has been written, the plugins and tools will automatically get installed.</p>"},{"location":"quick-start/usage/","title":"Usage","text":"<p>After installation and configuration, you should be good to go to install the plugins and tool chains.</p>"},{"location":"quick-start/usage/#get-the-plugins-and-tools","title":"Get the plugins and tools","text":"<p>Much like <code>composer</code> we also have <code>update</code> and <code>install</code> commands built in which are responsible for installing and updating the plugins and tools.</p> <p>Therefore, before running the configured tasks after cloning a fresh repo, we have to run <code>phpcq install</code>, which will install the versions mentioned in the <code>phpcq.lock</code> file. If this file should not exist yet, the <code>install</code> command behaves like <code>update</code>.</p>"},{"location":"quick-start/usage/#running-the-tasks","title":"Running the tasks","text":"<p>Invoking <code>phpcq</code> without any further parameter will execute the default task chain. This is either a chain with the explicit name <code>default</code> or, when no chain with that name exist, the first defined chain.</p> <p>If you want to execute a certain task, use the <code>run</code> command with the <code>&lt;task-name&gt;</code> as parameter.</p>"}]}